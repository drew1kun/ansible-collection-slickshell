"============================= ASYNCOMPLETE-VIM ================================
" Force refresh completion:
imap <c-space> <Plug>(asyncomplete_force_refresh)

" Disable(0)/Enable(1) the autocomplete popup while typing:
let g:asyncomplete_auto_popup = 1

" Remove duplicates if using multiple sources:
let g:asyncomplete_remove_duplicates = 1

" Enable fuzzy smart completion:
"REQUIREMENTS:
" - auto_popup enabled:                     let g:asyncomplete_auto_popup = 1
" - Neovim 0.2.2+ or Vim8 with lua support  :echo has('lua')
" - TextChangedP autocmd support -          :echo exists('##TextChangedP')
let g:asyncomplete_smart_completion = 1

" Disable preview window:
"set completeopt-=preview

" Enable preview window:
set completeopt+=preview

" Auto close preview window when completion is done.
autocmd! CompleteDone * if pumvisible() == 0 | pclose | endif
{# {% for plugin in vim_plugins %} #}
{# {%if 'vim-lsp' in plugin.name %} #}
{% if vim_plugins | selectattr('name','search','vim-lsp') | list | count > 0 %}

" Python Language Server Proto (LSP)
" All LSP require 'prabirshresth/vim-lsp' and 'prabirshresth/asyncomplete-lsp.vim'
if executable('pyls')
    " pip install python-language-server
    au User lsp_setup call lsp#register_server({
        \ 'name': 'pyls',
        \ 'cmd': {server_info->['pyls']},
        \ 'whitelist': ['python'],
        \ })
endif

if executable('typescript-language-server')
    au User lsp_setup call lsp#register_server({
        \ 'name': 'typescript-language-server',
        \ 'cmd': {server_info->[&shell, &shellcmdflag, 'typescript-language-server --stdio']},
        \ 'root_uri':{server_info->lsp#utils#path_to_uri(lsp#utils#find_nearest_parent_file_directory(lsp#utils#get_buffer_path(), 'tsconfig.json'))},
        \ 'whitelist': ['typescript'],
        \ })
endif
{% endif %}
{# {% if 'necosyntax' in plugin.name %} #}
{% if vim_plugins | selectattr('name','search','necosyntax') | list | count > 0 %}

au User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#necosyntax#get_source_options({
    \ 'name': 'necosyntax',
    \ 'whitelist': ['*'],
    \ 'completor': function('asyncomplete#sources#necosyntax#completor'),
    \ }))
{% endif %}
{# {%if 'buffer' in plugin.name %} #}
{% if vim_plugins | selectattr('name','search','buffer') | list | count > 0 %}

au User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#buffer#get_source_options({
    \ 'name': 'buffer',
    \ 'whitelist': ['*'],
    \ 'completor': function('asyncomplete#sources#buffer#completor'),
    \ }))
{% endif %}
{# {%if 'necovim.vim' in plugin.name %} #}
{% if vim_plugins | selectattr('name','search','necovim.vim') | list | count > 0 %}

au User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#necovim#get_source_options({
    \ 'name': 'necovim',
    \ 'whitelist': ['vim'],
    \ 'completor': function('asyncomplete#sources#necovim#completor'),
    \ }))
{% endif %}
{# {%if 'file' in plugin.name %} #}
{% if vim_plugins | selectattr('name','search','file') | list | count > 0 %}

au User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#file#get_source_options({
    \ 'name': 'file',
    \ 'whitelist': ['*'],
    \ 'priority': 10,
    \ 'completor': function('asyncomplete#sources#file#completor')
    \ }))
{% endif %}
{# {%if 'asyncomplete-emoji' in plugin.name %} #}
{% if vim_plugins | selectattr('name','search','asyncomplete-emoji') | list | count > 0 %}

au User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#emoji#get_source_options({
    \ 'name': 'emoji',
    \ 'whitelist': ['*'],
    \ 'completor': function('asyncomplete#sources#emoji#completor'),
    \ }))
{% endif %}
{# {%if 'asyncomplete-omni' in plugin.name %} #}
{% if vim_plugins | selectattr('name','search','asyncomplete-omni') | list | count > 0 %}

au User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#omni#get_source_options({
    \ 'name': 'omni',
    \ 'whitelist': ['*'],
    \ 'blacklist': ['c', 'cpp', 'html'],
    \ 'completor': function('asyncomplete#sources#omni#completor')
    \  }))
{% endif %}
{# {%if 'asyncomplete-ale' in plugin.name %} #}
{% if vim_plugins | selectattr('name','search','asyncomplete-ale') | list | count > 0 %}

au User asyncomplete_setup call asyncomplete#ale#register_source({
    \ 'name': 'reason',
    \ 'linter': 'flow',
    \ })
{% endif %}
{# {% endfor %} #}
"===============================================================================
